"use strict";(self.webpackChunkcict_document=self.webpackChunkcict_document||[]).push([[8469],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>f});var r=i(67294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function s(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):s(s({},t),e)),i},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(i),g=n,f=u["".concat(l,".").concat(g)]||u[g]||p[g]||a;return i?r.createElement(f,s(s({ref:t},d),{},{components:i})):r.createElement(f,s({ref:t},d))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,s=new Array(a);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,s[1]=o;for(var c=2;c<a;c++)s[c]=i[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,i)}g.displayName="MDXCreateElement"},19595:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=i(87462),n=(i(67294),i(3905));const a={id:"grpc",title:"gRPC",sidebar_label:"gRPC",sidebar_position:3},s=void 0,o={unversionedId:"prerequisites/grpc",id:"version-1.0.0/prerequisites/grpc",title:"gRPC",description:"This guide was generated by ChatGPT. All content in this guide was generated by ChatGPT and should not be considered as professional advice or recommendations. Use at your own risk.",source:"@site/versioned_docs/version-1.0.0/prerequisites/grpc.md",sourceDirName:"prerequisites",slug:"/prerequisites/grpc",permalink:"/cict-document-deploy/docs/prerequisites/grpc",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0.0/prerequisites/grpc.md",tags:[],version:"1.0.0",sidebarPosition:3,frontMatter:{id:"grpc",title:"gRPC",sidebar_label:"gRPC",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Protocol Buffers",permalink:"/cict-document-deploy/docs/prerequisites/protocol-buffers"},next:{title:"Bazel Integration",permalink:"/cict-document-deploy/docs/prerequisites/bazel_integration"}},l={},c=[{value:"gRPC: A Comprehensive Overview",id:"grpc-a-comprehensive-overview",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Language-agnostic",id:"language-agnostic",level:3},{value:"Efficient",id:"efficient",level:3},{value:"High-performance",id:"high-performance",level:3},{value:"Flexible",id:"flexible",level:3},{value:"Interoperable",id:"interoperable",level:3},{value:"Architecture",id:"architecture",level:3},{value:"gRPC Service Definition",id:"grpc-service-definition",level:3},{value:"gRPC Server",id:"grpc-server",level:3},{value:"gRPC Client",id:"grpc-client",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Microservices",id:"microservices",level:3},{value:"Cloud-native Applications",id:"cloud-native-applications",level:3},{value:"Resources",id:"resources",level:3}],d={toc:c},u="wrapper";function p(e){let{components:t,...i}=e;return(0,n.kt)(u,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"This guide was generated by ChatGPT. All content in this guide was generated by ChatGPT and should not be considered as professional advice or recommendations. Use at your own risk.")),(0,n.kt)("h2",{id:"grpc-a-comprehensive-overview"},"gRPC: A Comprehensive Overview"),(0,n.kt)("p",null,"gRPC is an open-source remote procedure call (RPC) framework that was developed by Google. It is a high-performance, low-latency, and efficient framework that enables developers to build distributed systems and microservices. In this guide, we will provide a comprehensive overview of gRPC, including its key features, architecture, and use cases."),(0,n.kt)("h2",{id:"key-features"},"Key Features"),(0,n.kt)("p",null,"gRPC comes with several key features that make it an attractive choice for developers who are building distributed systems and microservices. Some of the key features of gRPC include:"),(0,n.kt)("h3",{id:"language-agnostic"},"Language-agnostic"),(0,n.kt)("p",null,"gRPC is designed to be language-agnostic, which means that it can be used with a wide range of programming languages. Currently, gRPC supports more than ten programming languages, including C++, Java, Go, Python, Ruby, and more. This allows developers to build distributed systems and microservices using their preferred programming language."),(0,n.kt)("h3",{id:"efficient"},"Efficient"),(0,n.kt)("p",null,"gRPC uses the Protocol Buffers data format, which is a compact binary format that is highly efficient in terms of data size and transfer speed. This makes gRPC a highly efficient framework for building distributed systems and microservices."),(0,n.kt)("h3",{id:"high-performance"},"High-performance"),(0,n.kt)("p",null,"gRPC uses HTTP/2 as its underlying transport protocol, which enables it to support high-performance communication between clients and servers. HTTP/2 is a binary protocol that is designed to be faster and more efficient than its predecessor, HTTP/1.1. This makes gRPC a high-performance framework that can be used to build scalable and robust distributed systems and microservices."),(0,n.kt)("h3",{id:"flexible"},"Flexible"),(0,n.kt)("p",null,"gRPC supports various types of RPCs, including unary RPCs, server streaming RPCs, client streaming RPCs, and bidirectional streaming RPCs. This enables developers to build distributed systems and microservices that can handle different types of communication patterns."),(0,n.kt)("h3",{id:"interoperable"},"Interoperable"),(0,n.kt)("p",null,"gRPC can be used to build interoperable systems and microservices that can communicate with each other, regardless of the programming language or platform they are running on. This makes it easier for developers to build distributed systems and microservices that can be easily integrated with existing systems and services."),(0,n.kt)("h3",{id:"architecture"},"Architecture"),(0,n.kt)("p",null,"gRPC uses a client-server architecture to enable communication between different systems and microservices. In this architecture, the client sends a request to the server, and the server responds with a response. gRPC uses Protocol Buffers as its data format to serialize and deserialize data between the client and server."),(0,n.kt)("h3",{id:"grpc-service-definition"},"gRPC Service Definition"),(0,n.kt)("p",null,"gRPC uses a service definition language to define the interface for a gRPC service. The service definition language is used to specify the methods that a gRPC service provides, as well as the request and response types for each method. The service definition language is platform-neutral, which means that it can be used to define a gRPC service in any programming language."),(0,n.kt)("h3",{id:"grpc-server"},"gRPC Server"),(0,n.kt)("p",null,"A gRPC server is a program that listens for incoming requests from clients and processes them. A gRPC server implements the methods defined in the service definition language, and handles the serialization and deserialization of data using Protocol Buffers."),(0,n.kt)("h3",{id:"grpc-client"},"gRPC Client"),(0,n.kt)("p",null,"A gRPC client is a program that sends requests to a gRPC server and receives responses. A gRPC client uses the methods defined in the service definition language to make requests to the server, and handles the serialization and deserialization of data using Protocol Buffers."),(0,n.kt)("h3",{id:"use-cases"},"Use Cases"),(0,n.kt)("p",null,"gRPC can be used in various use cases, including:"),(0,n.kt)("h3",{id:"microservices"},"Microservices"),(0,n.kt)("p",null,"gRPC is a popular choice for building microservices because of its high performance, efficiency, and language-agnostic design. Microservices built with gRPC can handle different types of communication patterns and can be easily integrated with existing systems and services."),(0,n.kt)("h3",{id:"cloud-native-applications"},"Cloud-native Applications"),(0,n.kt)("p",null,"gRPC is a good choice for building cloud-native applications because of its efficient data transfer and high-performance. Cloud-native applications are designed to run on cloud platforms like Kubernetes, and they take full advantage of cloud services such as scaling, resilience, and elasticity."),(0,n.kt)("p",null,"gRPC makes it easy to build cloud-native applications by providing a modern, efficient way to connect services running on different cloud platforms. With gRPC, developers can define services using the Protocol Buffers language and then generate client and server code in multiple programming languages."),(0,n.kt)("p",null,"gRPC also includes support for streaming, allowing for real-time data transfer between services. This is particularly useful for building applications that require real-time data processing or event-driven architectures."),(0,n.kt)("p",null,"In addition, gRPC integrates seamlessly with container orchestration systems like Kubernetes and service mesh technologies like Istio. This allows developers to easily deploy and manage their gRPC-based microservices in a distributed environment."),(0,n.kt)("p",null,"Overall, gRPC is an ideal choice for building cloud-native applications due to its efficient data transfer, high-performance, and support for modern architectures and technologies. Its ability to integrate with cloud platforms and service meshes makes it a powerful tool for building scalable, resilient, and elastic applications in the cloud."),(0,n.kt)("h3",{id:"resources"},"Resources"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://grpc.io/docs/"},"The official gRPC documentation")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/grpc/grpc"},"The gRPC GitHub repository")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.udemy.com/course/grpc-golang/"},"A free course on building cloud-native applications with gRPC")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://istio.io/latest/docs/tasks/traffic-management/grpc-to-http/"},"The Istio documentation on integrating gRPC services"))))}p.isMDXComponent=!0}}]);